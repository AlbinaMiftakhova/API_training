<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API_training</name>
    </assembly>
    <members>
        <member name="T:API_training.Common.DocumentPartsConst">
            <summary>
            Константы для указания частей API в Swagger
            </summary>
        </member>
        <member name="F:API_training.Common.DocumentPartsConst.Books">
            <summary>
            Константа для swagger-документа "Книги"
            </summary>
        </member>
        <member name="F:API_training.Common.DocumentPartsConst.Genre">
            <summary>
            Константа для swagger-документа "Жанры"
            </summary>
        </member>
        <member name="T:API_training.Common.SwaggerConfiguration">
            <summary>
            Расширения для конфигурации Swagger
            </summary>
        </member>
        <member name="M:API_training.Common.SwaggerConfiguration.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Настройка документов Swagger
            </summary>
            <param name="services">Коллекция сервисов для DI</param>
        </member>
        <member name="T:API_training.Controllers.BooksController">
            <summary>
            Контроллер для работы с данными о книгах
            </summary>
        </member>
        <member name="M:API_training.Controllers.BooksController.#ctor(API_training.Repositories.IUnitOfWork,Microsoft.Extensions.Logging.ILogger{API_training.Controllers.BooksController},AutoMapper.IMapper,API_training.Services.Interfaces.IBooksService)">
            <summary>
            Инициализирует экземпляр <see cref="T:API_training.Controllers.BooksController"/>
            </summary>
            <param name="repo">Репозиторий</param>
            <param name="logger">Логгер</param>
            <param name="mapper">Маппер</param>
        </member>
        <member name="M:API_training.Controllers.BooksController.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Получение перечня доступных книг
            </summary>
            <returns>Коллекция сущностей "Книги"</returns>
        </member>
        <member name="M:API_training.Controllers.BooksController.GetByIdAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Получение книги по идентификатору
            </summary>
            <param name="id">Идентификатор книги</param>
            <returns>Сущность "Книга"</returns>
        </member>
        <member name="M:API_training.Controllers.BooksController.PostAsync(API_training.Models.Requests.Books.CreateBooksRequest,System.Threading.CancellationToken)">
            <summary>
            Добавляет книгу в список доступных книг
            </summary>
            <param book="book">Экземпляр книги</param>
            <returns>Возвращает экземпляр добавленной книги</returns>
        </member>
        <member name="M:API_training.Controllers.BooksController.DeleteAsync(System.Threading.CancellationToken,System.Int64[])">
            <summary>
            Удаляет сущность "Книги" с заданным идентификатором
            </summary>
            <param name="ids">Идентификаторы книг</param>
            <returns>Новый список доступных книг</returns>
        </member>
        <member name="M:API_training.Controllers.BooksController.PutAsync(API_training.Models.Requests.Books.UpdateBooksRequest,System.Threading.CancellationToken)">
            <summary>
            Изменение сущности Книги
            </summary>
            <returns>Возвращает измененную сущность</returns>
        </member>
        <member name="T:API_training.Controllers.GenresController">
            <summary>
            Контроллер для работы с данными о книгах
            </summary>
        </member>
        <member name="M:API_training.Controllers.GenresController.#ctor(API_training.Repositories.UnitOfWork,Microsoft.Extensions.Logging.ILogger{API_training.Controllers.GenresController},AutoMapper.IMapper)">
            <summary>
            Инициализирует экземпляр <see cref="T:API_training.Controllers.GenresController"/>
            </summary>
            <param name="repo">Репозиторий</param>
            <param name="logger">Логгер</param>
            <param name="mapper">Маппер</param>
        </member>
        <member name="M:API_training.Controllers.GenresController.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Получение перечня жанров
            </summary>
            <returns>Коллекция сущностей "Жанры"</returns>
        </member>
        <member name="M:API_training.Controllers.GenresController.GetByIdAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Получение жанра по идентификатору
            </summary>
            <param name="id">Идентификатор жанра</param>
            <returns>Сущность "Жанр"</returns>
        </member>
        <member name="M:API_training.Controllers.GenresController.PostAsync(API_training.Models.Requests.Genres.CreateGenresRequest,System.Threading.CancellationToken)">
            <summary>
            Добавляет жанр
            </summary>
            <returns>Новый список жанров</returns>
        </member>
        <member name="M:API_training.Controllers.GenresController.DeleteAsync(System.Threading.CancellationToken,System.Int64[])">
            <summary>
            Удаляет жанр
            </summary>
            <param name="ids">Идентификаторы жанров</param>
            <returns>Новый список жанров</returns>
        </member>
        <member name="M:API_training.Controllers.GenresController.PutAsync(API_training.Models.Requests.Genres.UpdateGenresRequest,System.Threading.CancellationToken)">
            <summary>
            Изменяет сущность "Жанр"
            </summary>
            <returns>Возвращает изменненную запись</returns>
        </member>
        <member name="T:API_training.Controllers.Mappings.BooksProfile">
            <summary>
            Маппинг для запросов и ответов контроллера сущности Книги
            </summary>
        </member>
        <member name="M:API_training.Controllers.Mappings.BooksProfile.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:API_training.Controllers.Mappings.BooksProfile"/>
            </summary>
        </member>
        <member name="T:API_training.Controllers.Mappings.GenresProfile">
            <summary>
            Маппинг для запросов и ответов контроллера сущности Жанры
            </summary>
        </member>
        <member name="M:API_training.Controllers.Mappings.GenresProfile.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:API_training.Controllers.Mappings.GenresProfile"/>
            </summary>
        </member>
        <member name="T:API_training.Startup">
            <summary>
            Конфигурация приложения
            </summary>
        </member>
        <member name="M:API_training.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:API_training.Startup"/>.
            </summary>
            <param name="configuration">Конфигурация</param>
        </member>
        <member name="P:API_training.Startup.Configuration">
            <summary>
            Конфигурация
            </summary>
        </member>
        <member name="M:API_training.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Mетод вызывается средой исполнения. Используется для регистрации сервисов в IoC контейнере
            </summary>
            <param name="services">Коллекция сервисов</param>
        </member>
        <member name="M:API_training.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Mетод вызывается средой исполнения. Используется для конфигурации окружения для обработки HTTP запроса
            </summary>
            <param name="app">Средство конфигурации приложения</param>
            <param name="env">Информация об окружении, в котором работает приложение</param>
        </member>
    </members>
</doc>
